#include<bits/stdc++.h>
using namespace std;

int BFS(vector<vector<int>> &grid, queue<pair<int, int>> &q, vector<vector<int>> &visited) {
    int landCellCount = 0;
    int m = grid.size();
    int n = grid[0].size();
    int delRows[] = {-1, 0, 1, 0};
    int delColumns[] = {0, 1, 0, -1};
    while(!q.empty()) {
        int front_row = q.front().first;
        int front_col = q.front().second;
        q.pop();
        for(int i = 0; i < 4; i++) {
            int newRow = front_row + delRows[i];
            int newCol = front_col + delColumns[i];
            if(newRow >= 0 && newRow < m && newCol >= 0 && newCol < n && grid[newRow][newCol] == 1 && !visited[newRow][newCol]) {
                q.push({newRow, newCol});
                visited[newRow][newCol] = 1;
            }
        } 
    }
    for(int i = 0; i < m; i++) {
        for(int j = 0; j < n; j++) {
            if(grid[i][j] == 1 && !visited[i][j]) {
                landCellCount++;
            }
        }
    }
    return landCellCount;
}

int main() {
    
    int m, n;
    
    cout<<"Enter number of rows :- ";
    cin>>m;
    cout<<"Enter number of columns :- ";
    cin>>n;
    
    vector<vector<int>> grid(m, vector<int>(n));
    vector<vector<int>> visited(m, vector<int>(n, 0));
    
    for(int i = 0; i < m; i++) {
        cout<<"Enter "<<i + 1<<" row :- ";
        for(int j = 0; j < n; j++) {
            cin>>grid[i][j];
        }
        cout<<endl;
    }
    cout<<"2 D grid is :- "<<endl;
    for(int i = 0; i < m; i++) {
        for(int j = 0; j < n; j++) {
            cout<<grid[i][j]<<" ";
        }
        cout<<endl;
    }
    
    queue<pair<int, int>> q;
    
    //For first and last row
    for(int j = 0; j < n; j++) {
        if(grid[0][j] == 1) {
            q.push({0, j});
            visited[0][j] = 1;
        }
        if(grid[m - 1][j] == 1) {
            q.push({m - 1, j});
            visited[m - 1][j] = 1;
        }
    }
    //For First and Last column
    for(int i = 0; i < m; i++) {
        if(grid[i][0] == 1) {
            q.push({i, 0});
            visited[i][0] = 1;
        }
        if(grid[i][n - 1]) {
            q.push({i, n - 1});
            visited[i][n - 1] = 1;
        }
    }
    
    cout<<"Numbers of lands cells are :- "<<BFS(grid, q, visited)<<endl;
    
    return 0;
} 